{"version":3,"file":"static/webpack/static/development/pages/index.js.6f85d4b17ed15f7f6092.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import React from 'react'\r\nimport _ from 'lodash'\r\nimport styles from '../assets/scss/style.scss'\r\n\r\nconst _fieldWidth = 11;\r\nconst _fieldHeight = 21;\r\nconst _incatives = [\r\n    0, 10, 20, 30, 40,\r\n    50, 60, 70, 80, 90,\r\n    100, 110, 120, 130,\r\n    140, 150, 160, 170,\r\n    180, 190, 200, 210,\r\n    310, 410, 510, 610,\r\n    710, 810, 910, 110, 200,\r\n    1010, 1110, 1210, 1310, 1410,\r\n    1510, 1610,1710, 1810, 1910, 2010\r\n\r\n];\r\nconst _incativeBottom = [200,201,202,203,204,205,206,207,208,209,2010];\r\n\r\nconst _allowedFigures =  [\r\n    [\r\n        [4, 5, 6],\r\n        [5, 15, 25]\r\n    ],\r\n    [\r\n        [14, 15, 16, 25],\r\n        [5, 14, 15, 16],\r\n        [5, 25, 15, 16],\r\n        [5, 15, 25, 14]\r\n    ],\r\n    [\r\n        [4, 5, 6, 14, 16, 25, 24, 26, 15]\r\n    ]\r\n]\r\nconst Block = ({ index, active, number, figure, incative }) => (\r\n    <div\r\n        className={\r\n            `block \r\n            block-${index} \r\n            ${active ? 'filled' : ''}\r\n            ${incative ? 'inactive' : ''}\r\n        `\r\n        }>{number}</div>\r\n)\r\n\r\nconst Line = ({ index, line }) => <div className={`line line-${index}`}>{line}</div>\r\n\r\nconst _removeFirstAndlastElement = (array) => {\r\n    array.shift()\r\n    array.pop()\r\n    return array\r\n}\r\nclass Index extends React.Component {\r\n\r\n    state = {\r\n        activeFigureIndex: 0,\r\n        canPlay: true,\r\n        score: 0,\r\n        bottomStructure: [],\r\n        active: [4, 5, 6],\r\n        currentFigure: 0,\r\n        filledLineMarker: [],\r\n        allowedFigures : [\r\n            [\r\n                [4, 5, 6],\r\n                [5, 15, 25]\r\n            ],\r\n            [\r\n                [14, 15, 16, 25],\r\n                [5, 14, 15, 16],\r\n                [5, 25, 15, 16],\r\n                [5, 15, 25, 14]\r\n            ],\r\n            [\r\n                [4, 5, 6, 14, 16, 25, 24, 26, 15]\r\n            ]\r\n        ]\r\n    }\r\n\r\n    componentDidMount() {\r\n        let filledLineMarker = []\r\n        for (let i = 0; i < _fieldHeight; i++) {\r\n            let line = new Array()\r\n            for (let j = 0; j < _fieldWidth; j++) {\r\n                line.push(Number(String(i) + j))\r\n            }\r\n            filledLineMarker.push(_removeFirstAndlastElement(line))\r\n        }\r\n        this.setState({ filledLineMarker })\r\n    }\r\n\r\n    _moveLeft = () => {\r\n        const { allowedFigures,  activeFigureIndex, currentFigure} = this.state\r\n        let newAllowedFigures = allowedFigures\r\n        newAllowedFigures[currentFigure] = newAllowedFigures[currentFigure].map((item)=> item.map((figure) => figure - 1))\r\n        if (_.intersection(newAllowedFigures[currentFigure][activeFigureIndex], _incatives).length > 0) {\r\n            return false;\r\n        }\r\n        this.setState({ allowedFigures: newAllowedFigures, active: newAllowedFigures[currentFigure][activeFigureIndex]})\r\n    }\r\n\r\n    _moveRight = () => {\r\n        const { currentFigure, activeFigureIndex, allowedFigures } = this.state\r\n        let newAllowedFigures = allowedFigures\r\n        newAllowedFigures[currentFigure] = newAllowedFigures[currentFigure].map((item)=> item.map((figure) => figure + 1))\r\n        if (_.intersection(newAllowedFigures[currentFigure][activeFigureIndex], _incatives).length > 0) {\r\n            return false;\r\n        }\r\n        this.setState({ allowedFigures: newAllowedFigures, active: newAllowedFigures[currentFigure][activeFigureIndex] })\r\n    }\r\n\r\n    _moveDown = () => {\r\n        const { currentFigure, activeFigureIndex, allowedFigures, bottomStructure} = this.state\r\n        let newAllowedFigures = [].concat(allowedFigures)\r\n        newAllowedFigures[currentFigure] = newAllowedFigures[currentFigure].map((item) => item.map((figure) => figure + 10))\r\n        let nextStepValues = [].concat(newAllowedFigures)\r\n        nextStepValues[currentFigure] = nextStepValues[currentFigure].map((item) => item.map((figure) => figure + 10))\r\n        if (_.intersection(nextStepValues[currentFigure][activeFigureIndex], _incativeBottom).length > 0\r\n            || _.intersection(nextStepValues[currentFigure][activeFigureIndex], bottomStructure).length > 0) {\r\n            let newBottomStructure = bottomStructure\r\n            newBottomStructure.push(newAllowedFigures[currentFigure][activeFigureIndex])\r\n            this.setState({bottomStructure: _.uniq(newBottomStructure.flat())})\r\n            return false;\r\n        }\r\n        this.setState({\r\n            allowedFigures: newAllowedFigures,\r\n            active: newAllowedFigures[currentFigure][activeFigureIndex]\r\n        })\r\n    }\r\n\r\n    _rotateFigure = () => {\r\n        const { currentFigure, activeFigureIndex, allowedFigures } = this.state\r\n        const maxIndex = allowedFigures[currentFigure].length - 1\r\n        const newIndex = activeFigureIndex + 1 <= maxIndex ? activeFigureIndex + 1 : 0\r\n        this.setState({ activeFigureIndex: newIndex, active:  allowedFigures[currentFigure][newIndex]})\r\n    }\r\n\r\n    _changeFigure = () => {\r\n        const { allowedFigures } = this.state\r\n        const currentFigure = Math.floor(Math.random() * _allowedFigures.length)\r\n        let newAllowedFigures = allowedFigures\r\n        newAllowedFigures[currentFigure].push(_allowedFigures[currentFigure][0])\r\n        this.setState({\r\n            currentFigure,\r\n            activeFigureIndex: 0,\r\n            allowedFigures: newAllowedFigures,\r\n            active: _allowedFigures[currentFigure][0]\r\n        })\r\n    }\r\n\r\n    _checkLine = () => {\r\n        const { filledLineMarker, bottomStructure, score } = this.state\r\n        if (!bottomStructure.length)\r\n            return false;\r\n    \r\n        let newBottomStructure = bottomStructure\r\n        filledLineMarker.map((item) => {\r\n            if (item.some((elem) => newBottomStructure.includes(elem))) {\r\n                newBottomStructure = newBottomStructure.filter((el) => !item.includes(el))\r\n                this.setState({ bottomStructure: newBottomStructure, score:  score + 1})      \r\n                this._moveDown()\r\n            }\r\n        })\r\n    }\r\n\r\n    _checkProgress = () => {\r\n        const { filledLineMarker, bottomStructure } = this.state\r\n        const firstLine = filledLineMarker[0]\r\n        if (_.intersection(bottomStructure, firstLine).length) {\r\n            this.setState({canPlay: false})\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            bottomStructure,\r\n            active,\r\n            canPlay,\r\n            score\r\n        } = this.state\r\n        let field = []\r\n        for (let i = 0; i < _fieldHeight; i++) {\r\n            let line = []\r\n            for (let j = 0; j < _fieldWidth; j++) {\r\n                const number = Number(String(i) + j);\r\n                const incative = _incatives.includes(number)\r\n                line.push(<Block\r\n                    key={j}\r\n                    incative={incative}\r\n                    index={j}\r\n                    active={active.includes(number) || bottomStructure.includes(number)}\r\n                    number={number} ></Block>)\r\n            }\r\n            field.push(<Line key={i} line={line} index={i}></Line>)\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <button onClick={(e) => this._moveDown()}>Down</button>\r\n                    <button onClick={(e) => this._moveLeft()}>Left</button>\r\n                    <button onClick={(e) => this._moveRight()}>Right</button>\r\n                    <button onClick={(e) => this._rotateFigure()}>Rotate</button>\r\n                    <button onClick={(e) => this._changeFigure()}>Change</button>\r\n                    <button onClick={(e) => this._checkLine()}>Check</button>\r\n                    <button onClick={(e) => this._checkProgress()}>Check progress</button>\r\n                </div>\r\n                <div>Score: {score}</div> \r\n                {canPlay ? <div className={styles.field}>\r\n                    {field}\r\n                </div> : <div>You lose Bro</div>}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Index;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AAYA;AAEA;AACA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AACA;AAoojKA;AACA;AAmKA;;;;A","sourceRoot":""}